"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * layer2 hub
 * This spec defines the API for layer2 hub
 *
 * OpenAPI spec version: 0.0.0
 * Contact: alexvlewis@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * LcApi - fetch parameter creator
 * @export
 */
exports.LcApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Close ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling closeLC.');
            }
            var localVarPath = "/v1/lc/close";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Offer to open a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling openLC.');
            }
            var localVarPath = "/v1/lc/open";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Offer to update a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateLC.');
            }
            var localVarPath = "/v1/lc/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LcApi - functional programming interface
 * @export
 */
exports.LcApiFp = function (configuration) {
    return {
        /**
         * Close ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLC: function (body, options) {
            var localVarFetchArgs = exports.LcApiFetchParamCreator(configuration).closeLC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Offer to open a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLC: function (body, options) {
            var localVarFetchArgs = exports.LcApiFetchParamCreator(configuration).openLC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Offer to update a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLC: function (body, options) {
            var localVarFetchArgs = exports.LcApiFetchParamCreator(configuration).updateLC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * LcApi - factory interface
 * @export
 */
exports.LcApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Close ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeLC: function (body, options) {
            return exports.LcApiFp(configuration).closeLC(body, options)(fetch, basePath);
        },
        /**
         * Offer to open a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openLC: function (body, options) {
            return exports.LcApiFp(configuration).openLC(body, options)(fetch, basePath);
        },
        /**
         * Offer to update a ledger channel with Ingrid
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLC: function (body, options) {
            return exports.LcApiFp(configuration).updateLC(body, options)(fetch, basePath);
        },
    };
};
/**
 * LcApi - object-oriented interface
 * @export
 * @class LcApi
 * @extends {BaseAPI}
 */
var LcApi = /** @class */ (function (_super) {
    __extends(LcApi, _super);
    function LcApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Close ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    LcApi.prototype.closeLC = function (body, options) {
        return exports.LcApiFp(this.configuration).closeLC(body, options)(this.fetch, this.basePath);
    };
    /**
     * Offer to open a ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    LcApi.prototype.openLC = function (body, options) {
        return exports.LcApiFp(this.configuration).openLC(body, options)(this.fetch, this.basePath);
    };
    /**
     * Offer to update a ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    LcApi.prototype.updateLC = function (body, options) {
        return exports.LcApiFp(this.configuration).updateLC(body, options)(this.fetch, this.basePath);
    };
    return LcApi;
}(BaseAPI));
exports.LcApi = LcApi;
/**
 * VcApi - fetch parameter creator
 * @export
 */
exports.VcApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Close virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeVC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling closeVC.');
            }
            var localVarPath = "/v1/vc/close";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Offer to open a virtual channel with Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openVC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling openVC.');
            }
            var localVarPath = "/v1/vc/open";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Offer to update a virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVC: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateVC.');
            }
            var localVarPath = "/v1/vc/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("JSONGeneric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VcApi - functional programming interface
 * @export
 */
exports.VcApiFp = function (configuration) {
    return {
        /**
         * Close virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeVC: function (body, options) {
            var localVarFetchArgs = exports.VcApiFetchParamCreator(configuration).closeVC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Offer to open a virtual channel with Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openVC: function (body, options) {
            var localVarFetchArgs = exports.VcApiFetchParamCreator(configuration).openVC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Offer to update a virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVC: function (body, options) {
            var localVarFetchArgs = exports.VcApiFetchParamCreator(configuration).updateVC(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * VcApi - factory interface
 * @export
 */
exports.VcApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Close virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeVC: function (body, options) {
            return exports.VcApiFp(configuration).closeVC(body, options)(fetch, basePath);
        },
        /**
         * Offer to open a virtual channel with Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openVC: function (body, options) {
            return exports.VcApiFp(configuration).openVC(body, options)(fetch, basePath);
        },
        /**
         * Offer to update a virtual channel with Alice/Bob
         * @param {JSONGeneric} body Channel data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVC: function (body, options) {
            return exports.VcApiFp(configuration).updateVC(body, options)(fetch, basePath);
        },
    };
};
/**
 * VcApi - object-oriented interface
 * @export
 * @class VcApi
 * @extends {BaseAPI}
 */
var VcApi = /** @class */ (function (_super) {
    __extends(VcApi, _super);
    function VcApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Close virtual channel with Alice/Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    VcApi.prototype.closeVC = function (body, options) {
        return exports.VcApiFp(this.configuration).closeVC(body, options)(this.fetch, this.basePath);
    };
    /**
     * Offer to open a virtual channel with Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    VcApi.prototype.openVC = function (body, options) {
        return exports.VcApiFp(this.configuration).openVC(body, options)(this.fetch, this.basePath);
    };
    /**
     * Offer to update a virtual channel with Alice/Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    VcApi.prototype.updateVC = function (body, options) {
        return exports.VcApiFp(this.configuration).updateVC(body, options)(this.fetch, this.basePath);
    };
    return VcApi;
}(BaseAPI));
exports.VcApi = VcApi;
//# sourceMappingURL=api.js.map