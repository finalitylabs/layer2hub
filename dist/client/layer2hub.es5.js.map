{"version":3,"file":"layer2hub.es5.js","sources":["../../src/client/api.ts","../../src/client/configuration.ts","../../src/client/index.ts"],"sourcesContent":["/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * layer2 hub\n * This spec defines the API for layer2 hub \n *\n * OpenAPI spec version: 0.0.0\n * Contact: alexvlewis@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nimport * as url from \"url\";\nimport * as portableFetch from \"portable-fetch\";\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *  \n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n * \n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n * \n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface JSONGeneric\n */\nexport interface JSONGeneric {\n}\n\n\n/**\n * LcApi - fetch parameter creator\n * @export\n */\nexport const LcApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Close ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeLC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling closeLC.');\n            }\n            const localVarPath = `/v1/lc/close`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Offer to open a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openLC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling openLC.');\n            }\n            const localVarPath = `/v1/lc/open`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Offer to update a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateLC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling updateLC.');\n            }\n            const localVarPath = `/v1/lc/update`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LcApi - functional programming interface\n * @export\n */\nexport const LcApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Close ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = LcApiFetchParamCreator(configuration).closeLC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Offer to open a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = LcApiFetchParamCreator(configuration).openLC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Offer to update a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = LcApiFetchParamCreator(configuration).updateLC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * LcApi - factory interface\n * @export\n */\nexport const LcApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Close ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeLC(body: JSONGeneric, options?: any) {\n            return LcApiFp(configuration).closeLC(body, options)(fetch, basePath);\n        },\n        /**\n         * Offer to open a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openLC(body: JSONGeneric, options?: any) {\n            return LcApiFp(configuration).openLC(body, options)(fetch, basePath);\n        },\n        /**\n         * Offer to update a ledger channel with Ingrid\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateLC(body: JSONGeneric, options?: any) {\n            return LcApiFp(configuration).updateLC(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * LcApi - object-oriented interface\n * @export\n * @class LcApi\n * @extends {BaseAPI}\n */\nexport class LcApi extends BaseAPI {\n    /**\n     * Close ledger channel with Ingrid\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LcApi\n     */\n    public closeLC(body: JSONGeneric, options?: any) {\n        return LcApiFp(this.configuration).closeLC(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Offer to open a ledger channel with Ingrid\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LcApi\n     */\n    public openLC(body: JSONGeneric, options?: any) {\n        return LcApiFp(this.configuration).openLC(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Offer to update a ledger channel with Ingrid\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LcApi\n     */\n    public updateLC(body: JSONGeneric, options?: any) {\n        return LcApiFp(this.configuration).updateLC(body, options)(this.fetch, this.basePath);\n    }\n\n}\n\n/**\n * VcApi - fetch parameter creator\n * @export\n */\nexport const VcApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Close virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeVC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling closeVC.');\n            }\n            const localVarPath = `/v1/vc/close`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Offer to open a virtual channel with Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openVC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling openVC.');\n            }\n            const localVarPath = `/v1/vc/open`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Offer to update a virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVC(body: JSONGeneric, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling updateVC.');\n            }\n            const localVarPath = `/v1/vc/update`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"JSONGeneric\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * VcApi - functional programming interface\n * @export\n */\nexport const VcApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Close virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = VcApiFetchParamCreator(configuration).closeVC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Offer to open a virtual channel with Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = VcApiFetchParamCreator(configuration).openVC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Offer to update a virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JSONGeneric> {\n            const localVarFetchArgs = VcApiFetchParamCreator(configuration).updateVC(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * VcApi - factory interface\n * @export\n */\nexport const VcApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Close virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        closeVC(body: JSONGeneric, options?: any) {\n            return VcApiFp(configuration).closeVC(body, options)(fetch, basePath);\n        },\n        /**\n         * Offer to open a virtual channel with Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        openVC(body: JSONGeneric, options?: any) {\n            return VcApiFp(configuration).openVC(body, options)(fetch, basePath);\n        },\n        /**\n         * Offer to update a virtual channel with Alice/Bob\n         * @param {JSONGeneric} body Channel data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateVC(body: JSONGeneric, options?: any) {\n            return VcApiFp(configuration).updateVC(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * VcApi - object-oriented interface\n * @export\n * @class VcApi\n * @extends {BaseAPI}\n */\nexport class VcApi extends BaseAPI {\n    /**\n     * Close virtual channel with Alice/Bob\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VcApi\n     */\n    public closeVC(body: JSONGeneric, options?: any) {\n        return VcApiFp(this.configuration).closeVC(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Offer to open a virtual channel with Bob\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VcApi\n     */\n    public openVC(body: JSONGeneric, options?: any) {\n        return VcApiFp(this.configuration).openVC(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Offer to update a virtual channel with Alice/Bob\n     * @param {} body Channel data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VcApi\n     */\n    public updateVC(body: JSONGeneric, options?: any) {\n        return VcApiFp(this.configuration).updateVC(body, options)(this.fetch, this.basePath);\n    }\n\n}\n\n","// tslint:disable\n/**\n * layer2 hub\n * This spec defines the API for layer2 hub \n *\n * OpenAPI spec version: 0.0.0\n * Contact: alexvlewis@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n","// tslint:disable\n/**\n * layer2 hub\n * This spec defines the API for layer2 hub \n *\n * OpenAPI spec version: 0.0.0\n * Contact: alexvlewis@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n"],"names":["tslib_1.__extends","url.parse","url.format"],"mappings":"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"}