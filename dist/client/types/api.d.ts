/**
 * layer2 hub
 * This spec defines the API for layer2 hub
 *
 * OpenAPI spec version: 0.0.0
 * Contact: alexvlewis@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../../../src/client/custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface JSONGeneric
 */
export interface JSONGeneric {
}
/**
 * LcApi - fetch parameter creator
 * @export
 */
export declare const LcApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Close ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeLC(body: JSONGeneric, options?: any): FetchArgs;
    /**
     * Offer to open a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openLC(body: JSONGeneric, options?: any): FetchArgs;
    /**
     * Offer to update a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLC(body: JSONGeneric, options?: any): FetchArgs;
};
/**
 * LcApi - functional programming interface
 * @export
 */
export declare const LcApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Close ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
    /**
     * Offer to open a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
    /**
     * Offer to update a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
};
/**
 * LcApi - factory interface
 * @export
 */
export declare const LcApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Close ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to open a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to update a ledger channel with Ingrid
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
};
/**
 * LcApi - object-oriented interface
 * @export
 * @class LcApi
 * @extends {BaseAPI}
 */
export declare class LcApi extends BaseAPI {
    /**
     * Close ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    closeLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to open a ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    openLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to update a ledger channel with Ingrid
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LcApi
     */
    updateLC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
}
/**
 * VcApi - fetch parameter creator
 * @export
 */
export declare const VcApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Close virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeVC(body: JSONGeneric, options?: any): FetchArgs;
    /**
     * Offer to open a virtual channel with Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openVC(body: JSONGeneric, options?: any): FetchArgs;
    /**
     * Offer to update a virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVC(body: JSONGeneric, options?: any): FetchArgs;
};
/**
 * VcApi - functional programming interface
 * @export
 */
export declare const VcApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Close virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
    /**
     * Offer to open a virtual channel with Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
    /**
     * Offer to update a virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVC(body: JSONGeneric, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<JSONGeneric>;
};
/**
 * VcApi - factory interface
 * @export
 */
export declare const VcApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Close virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to open a virtual channel with Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    openVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to update a virtual channel with Alice/Bob
     * @param {JSONGeneric} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
};
/**
 * VcApi - object-oriented interface
 * @export
 * @class VcApi
 * @extends {BaseAPI}
 */
export declare class VcApi extends BaseAPI {
    /**
     * Close virtual channel with Alice/Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    closeVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to open a virtual channel with Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    openVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
    /**
     * Offer to update a virtual channel with Alice/Bob
     * @param {} body Channel data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VcApi
     */
    updateVC(body: JSONGeneric, options?: any): Promise<JSONGeneric>;
}
